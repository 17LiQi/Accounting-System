/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * 家庭记账系统的 RESTful API，支持用户认证、人员管理、账户管理、交易记录和统计。 支持银行、微信、支付宝等多种账号，每种账号下可有多张卡或子账户。 角色权限： - 管理员：访问所有数据，管理用户、账号、子账户。 - 普通用户：仅访问通过 user_sub_accounts 关联的子账户和自己的交易/统计。 
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiError } from '../models';
// @ts-ignore
import type { TransactionTypeDTO } from '../models';
// @ts-ignore
import type { TransactionTypeRequest } from '../models';
/**
 * TransactionTypesApi - axios parameter creator
 * @export
 */
export const TransactionTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建交易类型
         * @param {TransactionTypeRequest} transactionTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionTypesCreate: async (transactionTypeRequest: TransactionTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionTypeRequest' is not null or undefined
            assertParamExists('transactionTypesCreate', 'transactionTypeRequest', transactionTypeRequest)
            const localVarPath = `/transaction-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建交易类型
         * @param {TransactionTypeRequest} transactionTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionTypesCreate_1: async (transactionTypeRequest: TransactionTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionTypeRequest' is not null or undefined
            assertParamExists('transactionTypesCreate_1', 'transactionTypeRequest', transactionTypeRequest)
            const localVarPath = `/transaction-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除交易类型
         * @param {number} typeId 交易类型 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionTypesDelete: async (typeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeId' is not null or undefined
            assertParamExists('transactionTypesDelete', 'typeId', typeId)
            const localVarPath = `/transaction-types/{typeId}`
                .replace(`{${"typeId"}}`, encodeURIComponent(String(typeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除交易类型
         * @param {number} typeId 交易类型 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionTypesDelete_2: async (typeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeId' is not null or undefined
            assertParamExists('transactionTypesDelete_2', 'typeId', typeId)
            const localVarPath = `/transaction-types/{typeId}`
                .replace(`{${"typeId"}}`, encodeURIComponent(String(typeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 列出交易类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionTypesList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/transaction-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 列出交易类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionTypesList_3: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/transaction-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新交易类型
         * @param {number} typeId 交易类型 ID
         * @param {TransactionTypeRequest} transactionTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionTypesUpdate: async (typeId: number, transactionTypeRequest: TransactionTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeId' is not null or undefined
            assertParamExists('transactionTypesUpdate', 'typeId', typeId)
            // verify required parameter 'transactionTypeRequest' is not null or undefined
            assertParamExists('transactionTypesUpdate', 'transactionTypeRequest', transactionTypeRequest)
            const localVarPath = `/transaction-types/{typeId}`
                .replace(`{${"typeId"}}`, encodeURIComponent(String(typeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新交易类型
         * @param {number} typeId 交易类型 ID
         * @param {TransactionTypeRequest} transactionTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionTypesUpdate_4: async (typeId: number, transactionTypeRequest: TransactionTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeId' is not null or undefined
            assertParamExists('transactionTypesUpdate_4', 'typeId', typeId)
            // verify required parameter 'transactionTypeRequest' is not null or undefined
            assertParamExists('transactionTypesUpdate_4', 'transactionTypeRequest', transactionTypeRequest)
            const localVarPath = `/transaction-types/{typeId}`
                .replace(`{${"typeId"}}`, encodeURIComponent(String(typeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionTypesApi - functional programming interface
 * @export
 */
export const TransactionTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransactionTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 创建交易类型
         * @param {TransactionTypeRequest} transactionTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionTypesCreate(transactionTypeRequest: TransactionTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionTypeDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionTypesCreate(transactionTypeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionTypesApi.transactionTypesCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 创建交易类型
         * @param {TransactionTypeRequest} transactionTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionTypesCreate_1(transactionTypeRequest: TransactionTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionTypeDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionTypesCreate_1(transactionTypeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionTypesApi.transactionTypesCreate_1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 删除交易类型
         * @param {number} typeId 交易类型 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionTypesDelete(typeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionTypesDelete(typeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionTypesApi.transactionTypesDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 删除交易类型
         * @param {number} typeId 交易类型 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionTypesDelete_2(typeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionTypesDelete_2(typeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionTypesApi.transactionTypesDelete_2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 列出交易类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionTypesList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionTypeDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionTypesList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionTypesApi.transactionTypesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 列出交易类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionTypesList_3(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionTypeDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionTypesList_3(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionTypesApi.transactionTypesList_3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 更新交易类型
         * @param {number} typeId 交易类型 ID
         * @param {TransactionTypeRequest} transactionTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionTypesUpdate(typeId: number, transactionTypeRequest: TransactionTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionTypeDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionTypesUpdate(typeId, transactionTypeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionTypesApi.transactionTypesUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 更新交易类型
         * @param {number} typeId 交易类型 ID
         * @param {TransactionTypeRequest} transactionTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionTypesUpdate_4(typeId: number, transactionTypeRequest: TransactionTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionTypeDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionTypesUpdate_4(typeId, transactionTypeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionTypesApi.transactionTypesUpdate_4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TransactionTypesApi - factory interface
 * @export
 */
export const TransactionTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransactionTypesApiFp(configuration)
    return {
        /**
         * 
         * @summary 创建交易类型
         * @param {TransactionTypeRequest} transactionTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionTypesCreate(transactionTypeRequest: TransactionTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransactionTypeDTO> {
            return localVarFp.transactionTypesCreate(transactionTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建交易类型
         * @param {TransactionTypeRequest} transactionTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionTypesCreate_1(transactionTypeRequest: TransactionTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransactionTypeDTO> {
            return localVarFp.transactionTypesCreate_1(transactionTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除交易类型
         * @param {number} typeId 交易类型 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionTypesDelete(typeId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.transactionTypesDelete(typeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除交易类型
         * @param {number} typeId 交易类型 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionTypesDelete_2(typeId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.transactionTypesDelete_2(typeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 列出交易类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionTypesList(options?: RawAxiosRequestConfig): AxiosPromise<TransactionTypeDTO> {
            return localVarFp.transactionTypesList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 列出交易类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionTypesList_3(options?: RawAxiosRequestConfig): AxiosPromise<TransactionTypeDTO> {
            return localVarFp.transactionTypesList_3(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新交易类型
         * @param {number} typeId 交易类型 ID
         * @param {TransactionTypeRequest} transactionTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionTypesUpdate(typeId: number, transactionTypeRequest: TransactionTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransactionTypeDTO> {
            return localVarFp.transactionTypesUpdate(typeId, transactionTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新交易类型
         * @param {number} typeId 交易类型 ID
         * @param {TransactionTypeRequest} transactionTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionTypesUpdate_4(typeId: number, transactionTypeRequest: TransactionTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransactionTypeDTO> {
            return localVarFp.transactionTypesUpdate_4(typeId, transactionTypeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TransactionTypesApi - object-oriented interface
 * @export
 * @class TransactionTypesApi
 * @extends {BaseAPI}
 */
export class TransactionTypesApi extends BaseAPI {
    /**
     * 
     * @summary 创建交易类型
     * @param {TransactionTypeRequest} transactionTypeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionTypesApi
     */
    public transactionTypesCreate(transactionTypeRequest: TransactionTypeRequest, options?: RawAxiosRequestConfig) {
        return TransactionTypesApiFp(this.configuration).transactionTypesCreate(transactionTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建交易类型
     * @param {TransactionTypeRequest} transactionTypeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionTypesApi
     */
    public transactionTypesCreate_1(transactionTypeRequest: TransactionTypeRequest, options?: RawAxiosRequestConfig) {
        return TransactionTypesApiFp(this.configuration).transactionTypesCreate_1(transactionTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除交易类型
     * @param {number} typeId 交易类型 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionTypesApi
     */
    public transactionTypesDelete(typeId: number, options?: RawAxiosRequestConfig) {
        return TransactionTypesApiFp(this.configuration).transactionTypesDelete(typeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除交易类型
     * @param {number} typeId 交易类型 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionTypesApi
     */
    public transactionTypesDelete_2(typeId: number, options?: RawAxiosRequestConfig) {
        return TransactionTypesApiFp(this.configuration).transactionTypesDelete_2(typeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 列出交易类型
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionTypesApi
     */
    public transactionTypesList(options?: RawAxiosRequestConfig) {
        return TransactionTypesApiFp(this.configuration).transactionTypesList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 列出交易类型
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionTypesApi
     */
    public transactionTypesList_3(options?: RawAxiosRequestConfig) {
        return TransactionTypesApiFp(this.configuration).transactionTypesList_3(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新交易类型
     * @param {number} typeId 交易类型 ID
     * @param {TransactionTypeRequest} transactionTypeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionTypesApi
     */
    public transactionTypesUpdate(typeId: number, transactionTypeRequest: TransactionTypeRequest, options?: RawAxiosRequestConfig) {
        return TransactionTypesApiFp(this.configuration).transactionTypesUpdate(typeId, transactionTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新交易类型
     * @param {number} typeId 交易类型 ID
     * @param {TransactionTypeRequest} transactionTypeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionTypesApi
     */
    public transactionTypesUpdate_4(typeId: number, transactionTypeRequest: TransactionTypeRequest, options?: RawAxiosRequestConfig) {
        return TransactionTypesApiFp(this.configuration).transactionTypesUpdate_4(typeId, transactionTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

