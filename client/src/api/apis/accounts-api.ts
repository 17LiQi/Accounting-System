/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * 家庭记账系统的 RESTful API，支持用户认证、人员管理、账户管理、交易记录和统计。 支持银行、微信、支付宝等多种账号，每种账号下可有多张卡或子账户。 角色权限： - 管理员：访问所有数据，管理用户、账号、子账户。 - 普通用户：仅访问通过 user_sub_accounts 关联的子账户和自己的交易/统计。 
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Account } from '../models';
// @ts-ignore
import type { AccountRequest } from '../models';
// @ts-ignore
import type { ApiError } from '../models';
/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建顶级账户
         * @param {AccountRequest} accountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsCreate: async (accountRequest: AccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountRequest' is not null or undefined
            assertParamExists('accountsCreate', 'accountRequest', accountRequest)
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建顶级账户
         * @param {AccountRequest} accountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsCreate_1: async (accountRequest: AccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountRequest' is not null or undefined
            assertParamExists('accountsCreate_1', 'accountRequest', accountRequest)
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除顶级账户
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsDelete', 'id', id)
            const localVarPath = `/accounts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除顶级账户
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsDelete_2: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsDelete_2', 'id', id)
            const localVarPath = `/accounts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 列出顶级账户
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 列出顶级账户
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsList_3: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新顶级账户
         * @param {string} id 
         * @param {AccountRequest} accountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUpdate: async (id: string, accountRequest: AccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsUpdate', 'id', id)
            // verify required parameter 'accountRequest' is not null or undefined
            assertParamExists('accountsUpdate', 'accountRequest', accountRequest)
            const localVarPath = `/accounts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新顶级账户
         * @param {string} id 
         * @param {AccountRequest} accountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUpdate_4: async (id: string, accountRequest: AccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsUpdate_4', 'id', id)
            // verify required parameter 'accountRequest' is not null or undefined
            assertParamExists('accountsUpdate_4', 'accountRequest', accountRequest)
            const localVarPath = `/accounts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 创建顶级账户
         * @param {AccountRequest} accountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsCreate(accountRequest: AccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsCreate(accountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 创建顶级账户
         * @param {AccountRequest} accountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsCreate_1(accountRequest: AccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsCreate_1(accountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsCreate_1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 删除顶级账户
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 删除顶级账户
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsDelete_2(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsDelete_2(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsDelete_2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 列出顶级账户
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 列出顶级账户
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsList_3(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsList_3(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsList_3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 更新顶级账户
         * @param {string} id 
         * @param {AccountRequest} accountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUpdate(id: string, accountRequest: AccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUpdate(id, accountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 更新顶级账户
         * @param {string} id 
         * @param {AccountRequest} accountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUpdate_4(id: string, accountRequest: AccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUpdate_4(id, accountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsUpdate_4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         * 
         * @summary 创建顶级账户
         * @param {AccountRequest} accountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsCreate(accountRequest: AccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<Account> {
            return localVarFp.accountsCreate(accountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建顶级账户
         * @param {AccountRequest} accountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsCreate_1(accountRequest: AccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<Account> {
            return localVarFp.accountsCreate_1(accountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除顶级账户
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.accountsDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除顶级账户
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsDelete_2(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.accountsDelete_2(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 列出顶级账户
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsList(options?: RawAxiosRequestConfig): AxiosPromise<Account> {
            return localVarFp.accountsList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 列出顶级账户
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsList_3(options?: RawAxiosRequestConfig): AxiosPromise<Account> {
            return localVarFp.accountsList_3(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新顶级账户
         * @param {string} id 
         * @param {AccountRequest} accountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUpdate(id: string, accountRequest: AccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<Account> {
            return localVarFp.accountsUpdate(id, accountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新顶级账户
         * @param {string} id 
         * @param {AccountRequest} accountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUpdate_4(id: string, accountRequest: AccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<Account> {
            return localVarFp.accountsUpdate_4(id, accountRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
    /**
     * 
     * @summary 创建顶级账户
     * @param {AccountRequest} accountRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsCreate(accountRequest: AccountRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsCreate(accountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建顶级账户
     * @param {AccountRequest} accountRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsCreate_1(accountRequest: AccountRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsCreate_1(accountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除顶级账户
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsDelete(id: string, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除顶级账户
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsDelete_2(id: string, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsDelete_2(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 列出顶级账户
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsList(options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 列出顶级账户
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsList_3(options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsList_3(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新顶级账户
     * @param {string} id 
     * @param {AccountRequest} accountRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUpdate(id: string, accountRequest: AccountRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUpdate(id, accountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新顶级账户
     * @param {string} id 
     * @param {AccountRequest} accountRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUpdate_4(id: string, accountRequest: AccountRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUpdate_4(id, accountRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

