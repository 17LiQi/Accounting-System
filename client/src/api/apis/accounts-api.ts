/* tslint:disable */
/* eslint-disable */
/**
 * 家庭记账系统 API
 * 家庭记账系统的 RESTful API，支持用户认证、人员管理、账户管理、交易记录和统计。 支持银行、微信、支付宝等多种账号，每种账号下可有多张卡或子账户。 角色权限： - 管理员：访问所有数据，管理用户、账号、子账户。 - 普通用户：仅访问通过 user_sub_accounts 关联的子账户和自己的交易/统计。 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Account } from '../models';
// @ts-ignore
import type { AccountRequest } from '../models';
// @ts-ignore
import type { ApiError } from '../models';
/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 管理员创建新的顶级账户（银行、微信、支付宝等）。
         * @summary 创建顶级账户
         * @param {AccountRequest} [accountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsCreate: async (accountRequest?: AccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 管理员删除指定账户，需确保无关联子账户。
         * @summary 删除顶级账户
         * @param {number} accountId 账户 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsDelete: async (accountId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('accountsDelete', 'accountId', accountId)
            const localVarPath = `/accounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 管理员获取顶级账户列表。
         * @summary 列出顶级账户
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 管理员更新指定账户的名称或类型。
         * @summary 更新顶级账户
         * @param {number} accountId 账户 ID
         * @param {AccountRequest} [accountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUpdate: async (accountId: number, accountRequest?: AccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('accountsUpdate', 'accountId', accountId)
            const localVarPath = `/accounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * 管理员创建新的顶级账户（银行、微信、支付宝等）。
         * @summary 创建顶级账户
         * @param {AccountRequest} [accountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsCreate(accountRequest?: AccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsCreate(accountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 管理员删除指定账户，需确保无关联子账户。
         * @summary 删除顶级账户
         * @param {number} accountId 账户 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsDelete(accountId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsDelete(accountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 管理员获取顶级账户列表。
         * @summary 列出顶级账户
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Account>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 管理员更新指定账户的名称或类型。
         * @summary 更新顶级账户
         * @param {number} accountId 账户 ID
         * @param {AccountRequest} [accountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUpdate(accountId: number, accountRequest?: AccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUpdate(accountId, accountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.accountsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         * 管理员创建新的顶级账户（银行、微信、支付宝等）。
         * @summary 创建顶级账户
         * @param {AccountRequest} [accountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsCreate(accountRequest?: AccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<Account> {
            return localVarFp.accountsCreate(accountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 管理员删除指定账户，需确保无关联子账户。
         * @summary 删除顶级账户
         * @param {number} accountId 账户 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsDelete(accountId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.accountsDelete(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 管理员获取顶级账户列表。
         * @summary 列出顶级账户
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsList(options?: RawAxiosRequestConfig): AxiosPromise<Array<Account>> {
            return localVarFp.accountsList(options).then((request) => request(axios, basePath));
        },
        /**
         * 管理员更新指定账户的名称或类型。
         * @summary 更新顶级账户
         * @param {number} accountId 账户 ID
         * @param {AccountRequest} [accountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUpdate(accountId: number, accountRequest?: AccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<Account> {
            return localVarFp.accountsUpdate(accountId, accountRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
    /**
     * 管理员创建新的顶级账户（银行、微信、支付宝等）。
     * @summary 创建顶级账户
     * @param {AccountRequest} [accountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsCreate(accountRequest?: AccountRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsCreate(accountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 管理员删除指定账户，需确保无关联子账户。
     * @summary 删除顶级账户
     * @param {number} accountId 账户 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsDelete(accountId: number, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsDelete(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 管理员获取顶级账户列表。
     * @summary 列出顶级账户
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsList(options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 管理员更新指定账户的名称或类型。
     * @summary 更新顶级账户
     * @param {number} accountId 账户 ID
     * @param {AccountRequest} [accountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUpdate(accountId: number, accountRequest?: AccountRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUpdate(accountId, accountRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

