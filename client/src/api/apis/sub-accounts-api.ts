/* tslint:disable */
/* eslint-disable */
/**
 * 家庭记账系统 API
 * 家庭记账系统的 RESTful API，支持用户认证、人员管理、账户管理、交易记录和统计。 支持银行、微信、支付宝等多种账号，每种账号下可有多张卡或子账户。 角色权限： - 管理员：访问所有数据，管理用户、账号、子账户。 - 普通用户：仅访问通过 user_sub_accounts 关联的子账户和自己的交易/统计。 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiError } from '../models';
// @ts-ignore
import type { SubAccount } from '../models';
// @ts-ignore
import type { SubAccountRequest } from '../models';
/**
 * SubAccountsApi - axios parameter creator
 * @export
 */
export const SubAccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 管理员创建新的子账户。需提供唯一子账户编号和初始余额。
         * @summary 创建子账户
         * @param {SubAccountRequest} [subAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subAccountsCreate: async (subAccountRequest?: SubAccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sub-accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 管理员删除指定子账户，需确保无关联交易。
         * @summary 删除子账户
         * @param {number} subAccountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subAccountsDelete: async (subAccountId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('subAccountsDelete', 'subAccountId', subAccountId)
            const localVarPath = `/sub-accounts/{subAccountId}`
                .replace(`{${"subAccountId"}}`, encodeURIComponent(String(subAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 管理员更新指定子账户的信息。
         * @summary 更新子账户
         * @param {number} subAccountId 
         * @param {SubAccountRequest} [subAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subAccountsUpdate: async (subAccountId: number, subAccountRequest?: SubAccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('subAccountsUpdate', 'subAccountId', subAccountId)
            const localVarPath = `/sub-accounts/{subAccountId}`
                .replace(`{${"subAccountId"}}`, encodeURIComponent(String(subAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubAccountsApi - functional programming interface
 * @export
 */
export const SubAccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubAccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * 管理员创建新的子账户。需提供唯一子账户编号和初始余额。
         * @summary 创建子账户
         * @param {SubAccountRequest} [subAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subAccountsCreate(subAccountRequest?: SubAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subAccountsCreate(subAccountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountsApi.subAccountsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 管理员删除指定子账户，需确保无关联交易。
         * @summary 删除子账户
         * @param {number} subAccountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subAccountsDelete(subAccountId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subAccountsDelete(subAccountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountsApi.subAccountsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 管理员更新指定子账户的信息。
         * @summary 更新子账户
         * @param {number} subAccountId 
         * @param {SubAccountRequest} [subAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subAccountsUpdate(subAccountId: number, subAccountRequest?: SubAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subAccountsUpdate(subAccountId, subAccountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountsApi.subAccountsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SubAccountsApi - factory interface
 * @export
 */
export const SubAccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubAccountsApiFp(configuration)
    return {
        /**
         * 管理员创建新的子账户。需提供唯一子账户编号和初始余额。
         * @summary 创建子账户
         * @param {SubAccountRequest} [subAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subAccountsCreate(subAccountRequest?: SubAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<SubAccount> {
            return localVarFp.subAccountsCreate(subAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 管理员删除指定子账户，需确保无关联交易。
         * @summary 删除子账户
         * @param {number} subAccountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subAccountsDelete(subAccountId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.subAccountsDelete(subAccountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 管理员更新指定子账户的信息。
         * @summary 更新子账户
         * @param {number} subAccountId 
         * @param {SubAccountRequest} [subAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subAccountsUpdate(subAccountId: number, subAccountRequest?: SubAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<SubAccount> {
            return localVarFp.subAccountsUpdate(subAccountId, subAccountRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubAccountsApi - object-oriented interface
 * @export
 * @class SubAccountsApi
 * @extends {BaseAPI}
 */
export class SubAccountsApi extends BaseAPI {
    /**
     * 管理员创建新的子账户。需提供唯一子账户编号和初始余额。
     * @summary 创建子账户
     * @param {SubAccountRequest} [subAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountsApi
     */
    public subAccountsCreate(subAccountRequest?: SubAccountRequest, options?: RawAxiosRequestConfig) {
        return SubAccountsApiFp(this.configuration).subAccountsCreate(subAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 管理员删除指定子账户，需确保无关联交易。
     * @summary 删除子账户
     * @param {number} subAccountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountsApi
     */
    public subAccountsDelete(subAccountId: number, options?: RawAxiosRequestConfig) {
        return SubAccountsApiFp(this.configuration).subAccountsDelete(subAccountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 管理员更新指定子账户的信息。
     * @summary 更新子账户
     * @param {number} subAccountId 
     * @param {SubAccountRequest} [subAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountsApi
     */
    public subAccountsUpdate(subAccountId: number, subAccountRequest?: SubAccountRequest, options?: RawAxiosRequestConfig) {
        return SubAccountsApiFp(this.configuration).subAccountsUpdate(subAccountId, subAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

