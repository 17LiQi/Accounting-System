/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * 家庭记账系统的 RESTful API，支持用户认证、人员管理、账户管理、交易记录和统计。 支持银行、微信、支付宝等多种账号，每种账号下可有多张卡或子账户。 角色权限： - 管理员：访问所有数据，管理用户、账号、子账户。 - 普通用户：仅访问通过 user_sub_accounts 关联的子账户和自己的交易/统计。 
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiError } from '../models';
// @ts-ignore
import type { StatisticsResponse } from '../models';
/**
 * StatisticsApi - axios parameter creator
 * @export
 */
export const StatisticsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} period 
         * @param {number} year 
         * @param {number} [userId] 
         * @param {number} [accountId] 
         * @param {number} [subAccountId] 
         * @param {number} [month] 
         * @param {number} [week] 
         * @param {number} [day] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsGet: async (period: string, year: number, userId?: number, accountId?: number, subAccountId?: number, month?: number, week?: number, day?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'period' is not null or undefined
            assertParamExists('statisticsGet', 'period', period)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('statisticsGet', 'year', year)
            const localVarPath = `/statistics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (accountId !== undefined) {
                localVarQueryParameter['accountId'] = accountId;
            }

            if (subAccountId !== undefined) {
                localVarQueryParameter['subAccountId'] = subAccountId;
            }

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }

            if (week !== undefined) {
                localVarQueryParameter['week'] = week;
            }

            if (day !== undefined) {
                localVarQueryParameter['day'] = day;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取收支统计
         * @param {StatisticsGet1PeriodEnum} period 统计周期（月度或年度）
         * @param {number} year 年份
         * @param {number} [userId] 按用户过滤（管理员专用，普通用户自动使用 JWT userId）
         * @param {number} [accountId] 按顶级账号过滤
         * @param {number} [subAccountId] 按子账户过滤
         * @param {number} [month] 月份（月度统计时需要）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsGet1: async (period: StatisticsGet1PeriodEnum, year: number, userId?: number, accountId?: number, subAccountId?: number, month?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'period' is not null or undefined
            assertParamExists('statisticsGet1', 'period', period)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('statisticsGet1', 'year', year)
            const localVarPath = `/statistics/statistics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (accountId !== undefined) {
                localVarQueryParameter['accountId'] = accountId;
            }

            if (subAccountId !== undefined) {
                localVarQueryParameter['subAccountId'] = subAccountId;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取收支统计
         * @param {StatisticsGet10PeriodEnum} period 统计周期（月度或年度）
         * @param {number} year 年份
         * @param {number} [userId] 按用户过滤（管理员专用，普通用户自动使用 JWT userId）
         * @param {number} [accountId] 按顶级账号过滤
         * @param {number} [subAccountId] 按子账户过滤
         * @param {number} [month] 月份（月度统计时需要）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsGet1_1: async (period: StatisticsGet10PeriodEnum, year: number, userId?: number, accountId?: number, subAccountId?: number, month?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'period' is not null or undefined
            assertParamExists('statisticsGet1_1', 'period', period)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('statisticsGet1_1', 'year', year)
            const localVarPath = `/statistics/statistics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (accountId !== undefined) {
                localVarQueryParameter['accountId'] = accountId;
            }

            if (subAccountId !== undefined) {
                localVarQueryParameter['subAccountId'] = subAccountId;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatisticsApi - functional programming interface
 * @export
 */
export const StatisticsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StatisticsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} period 
         * @param {number} year 
         * @param {number} [userId] 
         * @param {number} [accountId] 
         * @param {number} [subAccountId] 
         * @param {number} [month] 
         * @param {number} [week] 
         * @param {number} [day] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statisticsGet(period: string, year: number, userId?: number, accountId?: number, subAccountId?: number, month?: number, week?: number, day?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatisticsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statisticsGet(period, year, userId, accountId, subAccountId, month, week, day, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatisticsApi.statisticsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取收支统计
         * @param {StatisticsGet1PeriodEnum} period 统计周期（月度或年度）
         * @param {number} year 年份
         * @param {number} [userId] 按用户过滤（管理员专用，普通用户自动使用 JWT userId）
         * @param {number} [accountId] 按顶级账号过滤
         * @param {number} [subAccountId] 按子账户过滤
         * @param {number} [month] 月份（月度统计时需要）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statisticsGet1(period: StatisticsGet1PeriodEnum, year: number, userId?: number, accountId?: number, subAccountId?: number, month?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatisticsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statisticsGet1(period, year, userId, accountId, subAccountId, month, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatisticsApi.statisticsGet1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取收支统计
         * @param {StatisticsGet10PeriodEnum} period 统计周期（月度或年度）
         * @param {number} year 年份
         * @param {number} [userId] 按用户过滤（管理员专用，普通用户自动使用 JWT userId）
         * @param {number} [accountId] 按顶级账号过滤
         * @param {number} [subAccountId] 按子账户过滤
         * @param {number} [month] 月份（月度统计时需要）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statisticsGet1_1(period: StatisticsGet10PeriodEnum, year: number, userId?: number, accountId?: number, subAccountId?: number, month?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatisticsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statisticsGet1_1(period, year, userId, accountId, subAccountId, month, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatisticsApi.statisticsGet1_1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StatisticsApi - factory interface
 * @export
 */
export const StatisticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StatisticsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} period 
         * @param {number} year 
         * @param {number} [userId] 
         * @param {number} [accountId] 
         * @param {number} [subAccountId] 
         * @param {number} [month] 
         * @param {number} [week] 
         * @param {number} [day] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsGet(period: string, year: number, userId?: number, accountId?: number, subAccountId?: number, month?: number, week?: number, day?: number, options?: RawAxiosRequestConfig): AxiosPromise<StatisticsResponse> {
            return localVarFp.statisticsGet(period, year, userId, accountId, subAccountId, month, week, day, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取收支统计
         * @param {StatisticsGet1PeriodEnum} period 统计周期（月度或年度）
         * @param {number} year 年份
         * @param {number} [userId] 按用户过滤（管理员专用，普通用户自动使用 JWT userId）
         * @param {number} [accountId] 按顶级账号过滤
         * @param {number} [subAccountId] 按子账户过滤
         * @param {number} [month] 月份（月度统计时需要）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsGet1(period: StatisticsGet1PeriodEnum, year: number, userId?: number, accountId?: number, subAccountId?: number, month?: number, options?: RawAxiosRequestConfig): AxiosPromise<StatisticsResponse> {
            return localVarFp.statisticsGet1(period, year, userId, accountId, subAccountId, month, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取收支统计
         * @param {StatisticsGet10PeriodEnum} period 统计周期（月度或年度）
         * @param {number} year 年份
         * @param {number} [userId] 按用户过滤（管理员专用，普通用户自动使用 JWT userId）
         * @param {number} [accountId] 按顶级账号过滤
         * @param {number} [subAccountId] 按子账户过滤
         * @param {number} [month] 月份（月度统计时需要）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsGet1_1(period: StatisticsGet10PeriodEnum, year: number, userId?: number, accountId?: number, subAccountId?: number, month?: number, options?: RawAxiosRequestConfig): AxiosPromise<StatisticsResponse> {
            return localVarFp.statisticsGet1_1(period, year, userId, accountId, subAccountId, month, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StatisticsApi - object-oriented interface
 * @export
 * @class StatisticsApi
 * @extends {BaseAPI}
 */
export class StatisticsApi extends BaseAPI {
    /**
     * 
     * @param {string} period 
     * @param {number} year 
     * @param {number} [userId] 
     * @param {number} [accountId] 
     * @param {number} [subAccountId] 
     * @param {number} [month] 
     * @param {number} [week] 
     * @param {number} [day] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public statisticsGet(period: string, year: number, userId?: number, accountId?: number, subAccountId?: number, month?: number, week?: number, day?: number, options?: RawAxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).statisticsGet(period, year, userId, accountId, subAccountId, month, week, day, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取收支统计
     * @param {StatisticsGet1PeriodEnum} period 统计周期（月度或年度）
     * @param {number} year 年份
     * @param {number} [userId] 按用户过滤（管理员专用，普通用户自动使用 JWT userId）
     * @param {number} [accountId] 按顶级账号过滤
     * @param {number} [subAccountId] 按子账户过滤
     * @param {number} [month] 月份（月度统计时需要）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public statisticsGet1(period: StatisticsGet1PeriodEnum, year: number, userId?: number, accountId?: number, subAccountId?: number, month?: number, options?: RawAxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).statisticsGet1(period, year, userId, accountId, subAccountId, month, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取收支统计
     * @param {StatisticsGet10PeriodEnum} period 统计周期（月度或年度）
     * @param {number} year 年份
     * @param {number} [userId] 按用户过滤（管理员专用，普通用户自动使用 JWT userId）
     * @param {number} [accountId] 按顶级账号过滤
     * @param {number} [subAccountId] 按子账户过滤
     * @param {number} [month] 月份（月度统计时需要）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public statisticsGet1_1(period: StatisticsGet10PeriodEnum, year: number, userId?: number, accountId?: number, subAccountId?: number, month?: number, options?: RawAxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).statisticsGet1_1(period, year, userId, accountId, subAccountId, month, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const StatisticsGet1PeriodEnum = {
    Monthly: 'monthly',
    Annual: 'annual'
} as const;
export type StatisticsGet1PeriodEnum = typeof StatisticsGet1PeriodEnum[keyof typeof StatisticsGet1PeriodEnum];
/**
 * @export
 */
export const StatisticsGet10PeriodEnum = {
    Monthly: 'monthly',
    Annual: 'annual'
} as const;
export type StatisticsGet10PeriodEnum = typeof StatisticsGet10PeriodEnum[keyof typeof StatisticsGet10PeriodEnum];
