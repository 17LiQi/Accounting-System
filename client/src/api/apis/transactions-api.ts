/* tslint:disable */
/* eslint-disable */
/**
 * 家庭记账系统 API
 * 家庭记账系统的 RESTful API，支持用户认证、人员管理、账户管理、交易记录和统计。 支持银行、微信、支付宝等多种账号，每种账号下可有多张卡或子账户。 角色权限： - 管理员：访问所有数据，管理用户、账号、子账户。 - 普通用户：仅访问通过 user_sub_accounts 关联的子账户和自己的交易/统计。 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiError } from '../models';
// @ts-ignore
import type { Transaction } from '../models';
// @ts-ignore
import type { TransactionListResponse } from '../models';
// @ts-ignore
import type { TransactionRequest } from '../models';
/**
 * TransactionsApi - axios parameter creator
 * @export
 */
export const TransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 创建新的交易记录。普通用户仅可为自己的子账户创建记录（匹配 user_sub_accounts）。 管理员可为任何用户创建。isIncome 由 typeId 对应的 transaction_types.is_income 确定。 
         * @summary 创建交易记录
         * @param {TransactionRequest} [transactionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsCreate: async (transactionRequest?: TransactionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取交易记录列表。普通用户仅可查看自己的记录（匹配 JWT 中的 userId）。 管理员可按 userId 过滤。 
         * @summary 列出交易记录
         * @param {number} page 
         * @param {number} size 
         * @param {number} [userId] 
         * @param {number} [subAccountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsList: async (page: number, size: number, userId?: number, subAccountId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('transactionsList', 'page', page)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('transactionsList', 'size', size)
            const localVarPath = `/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (subAccountId !== undefined) {
                localVarQueryParameter['subAccountId'] = subAccountId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionsApi - functional programming interface
 * @export
 */
export const TransactionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransactionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 创建新的交易记录。普通用户仅可为自己的子账户创建记录（匹配 user_sub_accounts）。 管理员可为任何用户创建。isIncome 由 typeId 对应的 transaction_types.is_income 确定。 
         * @summary 创建交易记录
         * @param {TransactionRequest} [transactionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsCreate(transactionRequest?: TransactionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsCreate(transactionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsApi.transactionsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 获取交易记录列表。普通用户仅可查看自己的记录（匹配 JWT 中的 userId）。 管理员可按 userId 过滤。 
         * @summary 列出交易记录
         * @param {number} page 
         * @param {number} size 
         * @param {number} [userId] 
         * @param {number} [subAccountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsList(page: number, size: number, userId?: number, subAccountId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsList(page, size, userId, subAccountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsApi.transactionsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TransactionsApi - factory interface
 * @export
 */
export const TransactionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransactionsApiFp(configuration)
    return {
        /**
         * 创建新的交易记录。普通用户仅可为自己的子账户创建记录（匹配 user_sub_accounts）。 管理员可为任何用户创建。isIncome 由 typeId 对应的 transaction_types.is_income 确定。 
         * @summary 创建交易记录
         * @param {TransactionRequest} [transactionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsCreate(transactionRequest?: TransactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<Transaction> {
            return localVarFp.transactionsCreate(transactionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取交易记录列表。普通用户仅可查看自己的记录（匹配 JWT 中的 userId）。 管理员可按 userId 过滤。 
         * @summary 列出交易记录
         * @param {number} page 
         * @param {number} size 
         * @param {number} [userId] 
         * @param {number} [subAccountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsList(page: number, size: number, userId?: number, subAccountId?: number, options?: RawAxiosRequestConfig): AxiosPromise<TransactionListResponse> {
            return localVarFp.transactionsList(page, size, userId, subAccountId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
export class TransactionsApi extends BaseAPI {
    /**
     * 创建新的交易记录。普通用户仅可为自己的子账户创建记录（匹配 user_sub_accounts）。 管理员可为任何用户创建。isIncome 由 typeId 对应的 transaction_types.is_income 确定。 
     * @summary 创建交易记录
     * @param {TransactionRequest} [transactionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsCreate(transactionRequest?: TransactionRequest, options?: RawAxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsCreate(transactionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取交易记录列表。普通用户仅可查看自己的记录（匹配 JWT 中的 userId）。 管理员可按 userId 过滤。 
     * @summary 列出交易记录
     * @param {number} page 
     * @param {number} size 
     * @param {number} [userId] 
     * @param {number} [subAccountId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsList(page: number, size: number, userId?: number, subAccountId?: number, options?: RawAxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsList(page, size, userId, subAccountId, options).then((request) => request(this.axios, this.basePath));
    }
}

