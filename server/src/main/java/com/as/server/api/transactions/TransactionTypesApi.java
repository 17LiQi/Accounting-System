/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.as.server.api.transactions;

import com.as.server.dto.error.ApiError;
import com.as.server.dto.transactions.TransactionTypeDTO;
import com.as.server.dto.transactions.TransactionTypeRequest;
import com.as.server.util.ApiUtil;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-07T20:30:49.533631100+08:00[Asia/Shanghai]")
@Validated
@Tag(name = "TransactionTypes", description = "the TransactionTypes API")
public interface TransactionTypesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /transaction-types : 创建交易类型
     * 管理员创建新的交易类型（收入或支出）。
     *
     * @param transactionType  (optional)
     * @return 交易类型已创建 (status code 201)
     *         or 无效输入（名称重复或参数错误） (status code 400)
     *         or 权限不足（非管理员） (status code 403)
     */
    @Operation(
        operationId = "transactionTypesCreate",
        summary = "创建交易类型",
        tags = { "transaction-types" },
        responses = {
            @ApiResponse(responseCode = "201", description = "交易类型已创建", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  TransactionTypeDTO.class))),
            @ApiResponse(responseCode = "400", description = "无效输入（名称重复或参数错误）", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ApiError.class))),
            @ApiResponse(responseCode = "403", description = "权限不足（非管理员）", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ApiError.class)))
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/transaction-types",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TransactionTypeDTO> transactionTypesCreate(
        @Parameter(name = "TransactionType", description = "", schema = @Schema(description = "")) @Valid @RequestBody(required = false) TransactionTypeRequest transactionTypeRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"isIncome\" : true, \"name\" : \"name\", \"typeId\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /transaction-types/{typeId} : 删除交易类型
     * 管理员删除指定交易类型，需确保无关联交易记录。
     *
     * @param typeId 交易类型 ID (required)
     * @return 交易类型已删除 (status code 204)
     *         or 权限不足（非管理员） (status code 403)
     *         or 交易类型不存在 (status code 404)
     *         or 交易类型存在关联交易记录，无法删除 (status code 409)
     */
    @Operation(
        operationId = "transactionTypesDelete",
        summary = "删除交易类型",
        tags = { "transaction-types" },
        responses = {
            @ApiResponse(responseCode = "204", description = "交易类型已删除"),
            @ApiResponse(responseCode = "403", description = "权限不足（非管理员）", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ApiError.class))),
            @ApiResponse(responseCode = "404", description = "交易类型不存在", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ApiError.class))),
            @ApiResponse(responseCode = "409", description = "交易类型存在关联交易记录，无法删除", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ApiError.class)))
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/transaction-types/{typeId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> transactionTypesDelete(
        @Parameter(name = "typeId", description = "交易类型 ID", required = true, schema = @Schema(description = "")) @PathVariable("typeId") Integer typeId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /transaction-types : 列出交易类型
     * 获取所有交易类型（收入/支出），用于新增交易时选择类型。
     *
     * @return 交易类型列表 (status code 200)
     *         or 权限不足 (status code 403)
     */
    @Operation(
        operationId = "transactionTypesList",
        summary = "列出交易类型",
        tags = { "transaction-types" },
        responses = {
            @ApiResponse(responseCode = "200", description = "交易类型列表", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  TransactionTypeDTO.class))),
            @ApiResponse(responseCode = "403", description = "权限不足", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ApiError.class)))
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/transaction-types",
        produces = { "application/json" }
    )
    default ResponseEntity<List<TransactionTypeDTO>> transactionTypesList(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"isIncome\" : true, \"name\" : \"name\", \"typeId\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /transaction-types/{typeId} : 更新交易类型
     * 管理员更新指定交易类型的名称或收入/支出属性。
     *
     * @param typeId 交易类型 ID (required)
     * @param transactionType  (optional)
     * @return 交易类型已更新 (status code 200)
     *         or 无效输入（名称重复或参数错误） (status code 400)
     *         or 权限不足（非管理员） (status code 403)
     *         or 交易类型不存在 (status code 404)
     */
    @Operation(
        operationId = "transactionTypesUpdate",
        summary = "更新交易类型",
        tags = { "transaction-types" },
        responses = {
            @ApiResponse(responseCode = "200", description = "交易类型已更新", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  TransactionTypeDTO.class))),
            @ApiResponse(responseCode = "400", description = "无效输入（名称重复或参数错误）", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ApiError.class))),
            @ApiResponse(responseCode = "403", description = "权限不足（非管理员）", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ApiError.class))),
            @ApiResponse(responseCode = "404", description = "交易类型不存在", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ApiError.class)))
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/transaction-types/{typeId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TransactionTypeDTO> transactionTypesUpdate(
        @Parameter(name = "typeId", description = "交易类型 ID", required = true, schema = @Schema(description = "")) @PathVariable("typeId") Integer typeId,
        @Parameter(name = "TransactionType", description = "", schema = @Schema(description = "")) @Valid @RequestBody(required = false) TransactionTypeRequest transactionTypeRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"isIncome\" : true, \"name\" : \"name\", \"typeId\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
