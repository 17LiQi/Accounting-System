/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.as.server.api.auth;

import com.as.server.dto.auth.LoginRequest;
import com.as.server.dto.auth.LoginResponse;
import com.as.server.dto.error.ApiError;
import com.as.server.util.ApiUtil;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-07T20:30:49.533631100+08:00[Asia/Shanghai]")
@Validated
@Tag(name = "Auth", description = "the Auth API")
public interface AuthApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /login : 用户登录
     * 使用用户名和密码登录，返回 JWT 令牌。用户角色为 ADMIN 或 USER。
     *
     * @param loginRequest  (optional)
     * @return 登录成功 (status code 200)
     *         or 无效的用户名或密码 (status code 401)
     */
    @Operation(
        operationId = "authLogin",
        summary = "用户登录",
        tags = { "auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "登录成功", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  LoginResponse.class))),
            @ApiResponse(responseCode = "401", description = "无效的用户名或密码", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ApiError.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<LoginResponse> authLogin(
        @Parameter(name = "LoginRequest", description = "", schema = @Schema(description = "")) @Valid @RequestBody(required = false) LoginRequest loginRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role\" : \"ADMIN\", \"token\" : \"token\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
