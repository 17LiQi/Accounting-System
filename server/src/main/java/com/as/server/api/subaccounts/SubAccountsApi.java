/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.as.server.api.subaccounts;

import com.as.server.dto.accounts.SubAccountDTO;
import com.as.server.dto.accounts.SubAccountRequest;
import com.as.server.dto.error.ApiError;
import com.as.server.entity.SubAccount;
import com.as.server.util.ApiUtil;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-07T20:30:49.533631100+08:00[Asia/Shanghai]")
@Validated
@Tag(name = "SubAccounts", description = "the SubAccounts API")
public interface SubAccountsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /sub-accounts : 创建子账户
     * 管理员创建新的子账户。需提供唯一子账户编号和初始余额。
     *
     * @param subAccountRequest  (optional)
     * @return 子账户已创建 (status code 201)
     *         or 无效输入（账户编号重复或参数格式错误） (status code 400)
     *         or 权限不足（非管理员） (status code 403)
     */
    @Operation(
        operationId = "subAccountsCreate",
        summary = "创建子账户",
        tags = { "sub-accounts" },
        responses = {
            @ApiResponse(responseCode = "201", description = "子账户已创建", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  SubAccount.class))),
            @ApiResponse(responseCode = "400", description = "无效输入（账户编号重复或参数格式错误）", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ApiError.class))),
            @ApiResponse(responseCode = "403", description = "权限不足（非管理员）", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ApiError.class)))
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/sub-accounts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SubAccountDTO> subAccountsCreate(
        @Parameter(name = "SubAccountRequest", description = "", schema = @Schema(description = "")) @Valid @RequestBody(required = false) SubAccountRequest subAccountRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountId\" : 6, \"subAccountId\" : 0, \"balance\" : \"balance\", \"name\" : \"name\", \"cardType\" : \"SAVINGS\", \"accountNumber\" : \"accountNumber\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /sub-accounts/{subAccountId} : 删除子账户
     * 管理员删除指定子账户，需确保无关联交易。
     *
     * @param subAccountId  (required)
     * @return 子账户已删除 (status code 204)
     *         or 权限不足（非管理员） (status code 403)
     *         or 子账户不存在 (status code 404)
     *         or 子账户存在关联交易，无法删除 (status code 409)
     */
    @Operation(
        operationId = "subAccountsDelete",
        summary = "删除子账户",
        tags = { "sub-accounts" },
        responses = {
            @ApiResponse(responseCode = "204", description = "子账户已删除"),
            @ApiResponse(responseCode = "403", description = "权限不足（非管理员）", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ApiError.class))),
            @ApiResponse(responseCode = "404", description = "子账户不存在", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ApiError.class))),
            @ApiResponse(responseCode = "409", description = "子账户存在关联交易，无法删除", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ApiError.class)))
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/sub-accounts/{subAccountId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> subAccountsDelete(
        @Parameter(name = "subAccountId", description = "", required = true, schema = @Schema(description = "")) @PathVariable("subAccountId") Integer subAccountId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /sub-accounts/{subAccountId} : 更新子账户
     * 管理员更新指定子账户的信息。
     *
     * @param subAccountId  (required)
     * @param subAccountRequest  (optional)
     * @return 子账户已更新 (status code 200)
     *         or 无效输入（账户编号重复或参数格式错误） (status code 400)
     *         or 权限不足（非管理员） (status code 403)
     *         or 子账户不存在 (status code 404)
     */
    @Operation(
        operationId = "subAccountsUpdate",
        summary = "更新子账户",
        tags = { "sub-accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "子账户已更新", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  SubAccount.class))),
            @ApiResponse(responseCode = "400", description = "无效输入（账户编号重复或参数格式错误）", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ApiError.class))),
            @ApiResponse(responseCode = "403", description = "权限不足（非管理员）", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ApiError.class))),
            @ApiResponse(responseCode = "404", description = "子账户不存在", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ApiError.class)))
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/sub-accounts/{subAccountId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SubAccountDTO> subAccountsUpdate(
        @Parameter(name = "subAccountId", description = "", required = true, schema = @Schema(description = "")) @PathVariable("subAccountId") Integer subAccountId,
        @Parameter(name = "SubAccountRequest", description = "", schema = @Schema(description = "")) @Valid @RequestBody(required = false) SubAccountRequest subAccountRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountId\" : 6, \"subAccountId\" : 0, \"balance\" : \"balance\", \"name\" : \"name\", \"cardType\" : \"SAVINGS\", \"accountNumber\" : \"accountNumber\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * GET /sub-accounts : 列出子账户
     * 管理员列出所有子账户。
     *
     * @return 子账户列表 (status code 200)
     *         or 权限不足 (status code 403)
     */
    @Operation(
            operationId = "getSubAccounts",
            summary = "列出子账户",
            tags = { "sub-accounts" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "子账户列表", content = @Content(mediaType = "application/json", schema = @Schema(implementation = SubAccountDTO.class, type = "array"))),
                    @ApiResponse(responseCode = "403", description = "权限不足", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)))
            },
            security = { @SecurityRequirement(name = "bearerAuth") }
    )
    @RequestMapping(method = RequestMethod.GET, value = "/sub-accounts", produces = { "application/json" })
    ResponseEntity<List<SubAccountDTO>> subAccountsGet();

    /**
     * GET /sub-accounts/{subAccountId} : 获取子账户详情
     * 管理员获取指定子账户的详细信息。
     *
     * @param subAccountId  (required)
     * @return 子账户详情 (status code 200)
     *         or 权限不足 (status code 403)
     *         or 子账户不存在 (status code 404)
     */
    @Operation(
            operationId = "getSubAccount",
            summary = "获取子账户详情",
            tags = { "sub-accounts" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "子账户详情", content = @Content(mediaType = "application/json", schema = @Schema(implementation = SubAccountDTO.class))),
                    @ApiResponse(responseCode = "403", description = "权限不足", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))),
                    @ApiResponse(responseCode = "404", description = "子账户不存在", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)))
            },
            security = { @SecurityRequirement(name = "bearerAuth") }
    )
    @RequestMapping(method = RequestMethod.GET, value = "/sub-accounts/{subAccountId}", produces = { "application/json" })
    ResponseEntity<SubAccountDTO> subAccountGet(
            @Parameter(name = "subAccountId", description = "子账户 ID", required = true, schema = @Schema(type = "integer")) @PathVariable("subAccountId") Integer subAccountId
    );

}
