/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.as.server.api.transactions;

import com.as.server.dto.error.ApiError;
import com.as.server.dto.transactions.TransactionDTO;
import com.as.server.dto.transactions.TransactionListResponse;
import com.as.server.dto.transactions.TransactionRequest;
import com.as.server.util.ApiUtil;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-07T20:30:49.533631100+08:00[Asia/Shanghai]")
@Validated
@Tag(name = "Transactions", description = "the Transactions API")
public interface TransactionsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /transactions : 创建交易记录
     * 创建新的交易记录。普通用户仅可为自己的子账户创建记录（匹配 user_sub_accounts）。 管理员可为任何用户创建。isIncome 由 typeId 对应的 transaction_types.is_income 确定。 
     *
     * @param transactionRequest  (optional)
     * @return 交易记录已创建 (status code 201)
     *         or 无效输入（交易类型不存在或参数格式错误） (status code 400)
     *         or 权限不足（普通用户尝试访问未关联的子账户） (status code 403)
     */
    @Operation(
        operationId = "transactionsCreate",
        summary = "创建交易记录",
        tags = { "transactions" },
        responses = {
            @ApiResponse(responseCode = "201", description = "交易记录已创建", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  TransactionDTO.class))),
            @ApiResponse(responseCode = "400", description = "无效输入（交易类型不存在或参数格式错误）", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ApiError.class))),
            @ApiResponse(responseCode = "403", description = "权限不足（普通用户尝试访问未关联的子账户）", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ApiError.class)))
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/transactions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TransactionDTO> transactionsCreate(
        @Parameter(name = "TransactionRequest", description = "", schema = @Schema(description = "")) @Valid @RequestBody(required = false) TransactionRequest transactionRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"amount\" : \"amount\", \"subAccountId\" : 1, \"isIncome\" : true, \"typeId\" : 6, \"time\" : \"2000-01-23T04:56:07.000+00:00\", \"userId\" : 5, \"transactionId\" : 0, \"remarks\" : \"remarks\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /transactions : 列出交易记录
     * 获取交易记录列表。普通用户仅可查看自己的记录（匹配 JWT 中的 userId）。 管理员可按 userId 过滤。 
     *
     * @param page  (required)
     * @param size  (required)
     * @param userId  (optional)
     * @param subAccountId  (optional)
     * @return 交易记录列表 (status code 200)
     *         or 权限不足（普通用户尝试访问未关联的数据） (status code 403)
     */
    @Operation(
        operationId = "transactionsList",
        summary = "列出交易记录",
        tags = { "transactions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "交易记录列表", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  TransactionListResponse.class))),
            @ApiResponse(responseCode = "403", description = "权限不足（普通用户尝试访问未关联的数据）", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ApiError.class)))
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/transactions",
        produces = { "application/json" }
    )
    default ResponseEntity<TransactionListResponse> transactionsList(
        @NotNull @Min(0) @Parameter(name = "page", description = "", required = true, schema = @Schema(description = "")) @Valid @RequestParam(value = "page", required = true) Integer page,
        @NotNull @Min(1) @Max(100) @Parameter(name = "size", description = "", required = true, schema = @Schema(description = "")) @Valid @RequestParam(value = "size", required = true) Integer size,
        @Parameter(name = "userId", description = "", schema = @Schema(description = "")) @Valid @RequestParam(value = "userId", required = false) Integer userId,
        @Parameter(name = "subAccountId", description = "", schema = @Schema(description = "")) @Valid @RequestParam(value = "subAccountId", required = false) Integer subAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 5, \"transactions\" : [ { \"amount\" : \"amount\", \"subAccountId\" : 1, \"isIncome\" : true, \"typeId\" : 6, \"time\" : \"2000-01-23T04:56:07.000+00:00\", \"userId\" : 5, \"transactionId\" : 0, \"remarks\" : \"remarks\" }, { \"amount\" : \"amount\", \"subAccountId\" : 1, \"isIncome\" : true, \"typeId\" : 6, \"time\" : \"2000-01-23T04:56:07.000+00:00\", \"userId\" : 5, \"transactionId\" : 0, \"remarks\" : \"remarks\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * GET /transactions/{transactionId} : 获取交易记录详情
     * 获取指定 ID 的交易记录详情。普通用户仅可查看自己的记录（匹配 JWT 中的 userId）。 管理员可查看所有记录。
     *
     * @param transactionId  (required)
     * @return 交易记录详情 (status code 200)
     *         or 权限不足（普通用户尝试访问未关联的数据） (status code 403)
     *         or 交易记录不存在 (status code 404)
     */
    @Operation(
            operationId = "getTransaction",
            summary = "获取交易记录详情",
            tags = { "transactions" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "交易记录详情", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TransactionDTO.class))),
                    @ApiResponse(responseCode = "403", description = "权限不足（普通用户尝试访问未关联的数据）", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))),
                    @ApiResponse(responseCode = "404", description = "交易记录不存在", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)))
            },
            security = { @SecurityRequirement(name = "bearerAuth") }
    )
    @RequestMapping(method = RequestMethod.GET, value = "/transactions/{transactionId}", produces = { "application/json" })
    ResponseEntity<TransactionDTO> transactionGet(
            @Parameter(name = "transactionId", description = "交易记录 ID", required = true, schema = @Schema(type = "integer")) @PathVariable("transactionId") Integer transactionId
    );

    /**
     * PUT /transactions/{transactionId} : 更新交易记录
     * 更新指定 ID 的交易记录。普通用户仅可更新自己的记录（匹配 JWT 中的 userId）。 管理员可更新所有记录。
     *
     * @param transactionId  (required)
     * @param request  (required)
     * @return 交易记录已更新 (status code 200)
     *         or 无效输入（交易类型不存在或参数格式错误） (status code 400)
     *         or 权限不足（普通用户尝试访问未关联的数据） (status code 403)
     *         or 交易记录不存在 (status code 404)
     */
    @Operation(
            operationId = "updateTransaction",
            summary = "更新交易记录",
            tags = { "transactions" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "交易记录已更新", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TransactionDTO.class))),
                    @ApiResponse(responseCode = "400", description = "无效输入（交易类型不存在或参数格式错误）", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))),
                    @ApiResponse(responseCode = "403", description = "权限不足（普通用户尝试访问未关联的数据）", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))),
                    @ApiResponse(responseCode = "404", description = "交易记录不存在", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)))
            },
            security = { @SecurityRequirement(name = "bearerAuth") }
    )
    @RequestMapping(method = RequestMethod.PUT, value = "/transactions/{transactionId}", produces = { "application/json" }, consumes = { "application/json" })
    ResponseEntity<TransactionDTO> transactionUpdate(
            @Parameter(name = "transactionId", description = "交易记录 ID", required = true, schema = @Schema(type = "integer")) @PathVariable("transactionId") Integer transactionId,
            @Parameter(name = "TransactionRequest", description = "", schema = @Schema(description = "")) @Valid @RequestBody(required = false) TransactionRequest transactionRequest
    );

    @Operation(
            operationId = "deleteTransaction",
            summary = "删除交易记录",
            tags = { "transactions" },
            responses = {
                    @ApiResponse(responseCode = "204", description = "交易记录已删除"),
                    @ApiResponse(responseCode = "403", description = "权限不足（普通用户尝试访问未关联的数据）", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))),
                    @ApiResponse(responseCode = "404", description = "交易记录不存在", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class)))
            },
            security = { @SecurityRequirement(name = "bearerAuth") }
    )
    @RequestMapping(method = RequestMethod.DELETE, value = "/transactions/{transactionId}", produces = { "application/json" })
    ResponseEntity<Void> transactionDelete(
            @Parameter(name = "transactionId", description = "交易记录 ID", required = true, schema = @Schema(type = "integer")) @PathVariable("transactionId") Integer transactionId
    );

}
