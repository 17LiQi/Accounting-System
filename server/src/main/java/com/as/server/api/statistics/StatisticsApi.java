/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.as.server.api.statistics;

import com.as.server.dto.error.ApiError;
import com.as.server.dto.statistics.StatisticsResponse;
import com.as.server.util.ApiUtil;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-07T20:30:49.533631100+08:00[Asia/Shanghai]")
@Validated
@Tag(name = "Statistics", description = "the Statistics API")
public interface StatisticsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /statistics : 获取收支统计
     * 获取指定周期的收支统计，按交易类型分组。管理员可按 userId 过滤；普通用户仅可查看自己的统计。 
     *
     * @param period 统计周期（月度或年度） (required)
     * @param year 年份 (required)
     * @param userId 按用户过滤（管理员专用，普通用户自动使用 JWT userId） (optional)
     * @param accountId 按顶级账号过滤 (optional)
     * @param subAccountId 按子账户过滤 (optional)
     * @param month 月份（月度统计时需要） (optional)
     * @return 统计数据 (status code 200)
     *         or 无效参数（参数格式错误） (status code 400)
     *         or 权限不足（普通用户尝试访问未关联的数据） (status code 403)
     */
    @Operation(
        operationId = "statisticsGet",
        summary = "获取收支统计",
        tags = { "statistics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "统计数据", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  StatisticsResponse.class))),
            @ApiResponse(responseCode = "400", description = "无效参数（参数格式错误）", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ApiError.class))),
            @ApiResponse(responseCode = "403", description = "权限不足（普通用户尝试访问未关联的数据）", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ApiError.class)))
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/statistics",
        produces = { "application/json" }
    )
    default ResponseEntity<StatisticsResponse> statisticsGet(
        @NotNull @Parameter(name = "period", description = "统计周期（月度或年度）", required = true, schema = @Schema(description = "", allowableValues = { "monthly", "annual" })) @Valid @RequestParam(value = "period", required = true) String period,
        @NotNull @Parameter(name = "year", description = "年份", required = true, schema = @Schema(description = "")) @Valid @RequestParam(value = "year", required = true) Integer year,
        @Parameter(name = "userId", description = "按用户过滤（管理员专用，普通用户自动使用 JWT userId）", schema = @Schema(description = "")) @Valid @RequestParam(value = "userId", required = false) Integer userId,
        @Parameter(name = "accountId", description = "按顶级账号过滤", schema = @Schema(description = "")) @Valid @RequestParam(value = "accountId", required = false) Integer accountId,
        @Parameter(name = "subAccountId", description = "按子账户过滤", schema = @Schema(description = "")) @Valid @RequestParam(value = "subAccountId", required = false) Integer subAccountId,
        @Min(1) @Max(12) @Parameter(name = "month", description = "月份（月度统计时需要）", schema = @Schema(description = "")) @Valid @RequestParam(value = "month", required = false) Integer month
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"incomeByType\" : [ { \"amount\" : \"amount\", \"typeName\" : \"typeName\", \"typeId\" : 1 }, { \"amount\" : \"amount\", \"typeName\" : \"typeName\", \"typeId\" : 1 } ], \"totalIncome\" : \"totalIncome\", \"period\" : \"monthly\", \"month\" : 7, \"year\" : 0, \"expenseByType\" : [ { \"amount\" : \"amount\", \"typeName\" : \"typeName\", \"typeId\" : 5 }, { \"amount\" : \"amount\", \"typeName\" : \"typeName\", \"typeId\" : 5 } ], \"totalExpense\" : \"totalExpense\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
